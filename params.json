{"name":"icecast-parser","tagline":"NodeJS module for getting and parsing metadata from SHOUTcast/Icecast radio streams","body":"Features\r\n====\r\n- Opens async connection to URL and gets response with radio stream and metadata. Then pipes response to Transform stream for processing;\r\n- Getting metadata from stream is realized in Transform stream, so you can pipe radio station stream to another Writeable\\Duplex\\Transform stream;\r\n- Once metadata is recieved, `metadata` event triggers with metadata object;\r\n- After metadata is received, connection to radio station closes automatically, so you will not spent a lot of traffic;\r\n- But you can set `keepListen` flag in config object and continue listening radio station;\r\n- Autoupdating metadata from radiostation by interval in economical way (connection is opens when time has come);\r\n- Metadata parsed as object with key-value;\r\n- When you create new instance, you get EventEmitter. So you can subscribe to other events;\r\n- Easy to configure and use.\r\n\r\nGetting started\r\n====\r\n\r\nYou can install icecast-parser from npm.\r\n```shell\r\nnpm install icecast-parser\r\n```\r\n\r\nGet your first metadata from radio station.\r\n```javascript\r\nvar Metadata = require('icecast-parser');\r\n\r\nvar metadata = new Metadata('http://streaming.radionomy.com/HammerHeadRadio');\r\nmetadata.on('metadata', function(metadata) {\r\n    console.log([metadata.StreamTitle, 'is playing on', this.getLink()].join(' '));\r\n});\r\n```\r\n\r\nConfiguration\r\n===\r\n\r\nYou can provide additional parameters to constructor:\r\n\r\n- `keepListen` - by default `false`. If you set to `true`, then response from radio station is not destroys and you can pipe it to another streams.\r\n- `autoUpdate` - by default `false`. If you set to `true`, then metadata will be updates with interval and notifies you about new metadata;\r\n- `errorInterval` - by default `300` s. You can set interval in seconds when next try will be executed if connection was refused or rejected. Works only if `autoUpdate` is enabled.\r\n- `emptyInterval` - by default `180` s. You can set interval in seconds when next try will be executed if metadata is empty. Works only if `autoUpdate` is enabled.\r\n- `metadataInterval` - by default `10` s. You can set interval in seconds when will be next update of metadata. Works only if `autoUpdate` is enabled.\r\n\r\n```javascript\r\nvar Metadata = require('icecast-parser');\r\n\r\nvar metadata = new Metadata('http://streaming.radionomy.com/HammerHeadRadio', {\r\n    keepListen: false, // don't listen radio station after metadata was received\r\n    autoUpdate: true, // update metadata after interval\r\n    errorInterval: 5 * 60, // retry connection after 5 minutes\r\n    emptyInterval: 3 * 60, // retry get metadata after 3 minutes\r\n    metadataInterval: 10 // update metadata after 10 seconds\r\n});\r\n\r\nmetadata.on('metadata', function(metadata) {\r\n    console.log('Here you will receive metadata each 10 seconds');\r\n    console.log(metadata.StreamTitle);\r\n});\r\n```\r\n\r\nEvents\r\n===\r\n\r\nYou can subscribe to 4 events - `error`, `empty`, `metadata`, `stream`.\r\n\r\n- `error` event triggers when connection to radio station was refused, rejected or timed out;\r\n- `empty` event triggers when connection was established successful, but radio station returns empty metadata;\r\n- `metadata` event triggers when connection was established successful and metadata is parsed successful;\r\n- `stream` event triggers when response from radio station returned and successfully piped to Transform stream.\r\n\r\n```javascript\r\nvar Metadata = require('icecast-parser');\r\n\r\nvar metadata = new Metadata('http://streaming.radionomy.com/HammerHeadRadio', {\r\n    keepListen: true\r\n});\r\n\r\nmetadata.on('error', function() {\r\n    console.log(['Connection to', this.getLink(), 'was rejected'].join(' '));\r\n});\r\n\r\nmetadata.on('empty', function() {\r\n    console.log(['Radio station', this.getLink(), 'doesn\\'t have metadata'].join(' '));\r\n});\r\n\r\nmetadata.on('metadata', function(metadata) {\r\n    console.log(metadata.StreamTitle);\r\n});\r\n\r\nmetadata.on('stream', function(stream) {\r\n    stream.pipe(process.stdout);\r\n});\r\n```\r\n\r\nLicense\r\n===\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Eugene Obrezkov\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}